<?xml version="1.0" encoding="UTF-8"?>
<!--
    Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，你会看到log4j2内部各种详细输出。
-->
<!--
    monitorInterval：Log4j能够自动检测修改配置 文件和重新配置本身，设置间隔秒数。
-->
<configuration status="info" monitorInterval="5">
    <properties>
        <property name="log.level">INFO</property>
        <property name="log.path">logs</property>
        <property name="all.path">${log.path}/all</property>
        <property name="snapshot.path">${log.path}/snapshot</property>
        <property name="serverlog.pattern.format">%d{yyyy-MM-dd HH:mm:ss.SSS} [SnapSync] [%level] %pid [%file:%L] [%t] %M | %msg%xEx%n</property>
    </properties>
    <!--先定义所有的appender-->
    <appenders>
        <!--这个输出控制台的配置-->
        <Console name="Console" target="SYSTEM_OUT">
            <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <ThresholdFilter level="${log.level}" onMatch="ACCEPT" onMismatch="DENY"/>
            <!--输出日志的格式-->
            <PatternLayout pattern="${serverlog.pattern.format}"/>
        </Console>
        <!--文件会打印出所有信息，这个log每次运行程序会自动清空，由append属性决定，这个也挺有用的，适合临时测试用-->
        <!--
        <File name="log" fileName="logs/test.log" append="false">
            <PatternLayout pattern="%d{HH:mm:ss.SSS} %-5level %class{36} %L %M - %msg%xEx%n"/>
        </File>
        -->

        <!-- 记录所有日志 -->
        <RollingFile name="all" fileName="${all.path}/info.log"
                     filePattern="${all.path}/$${date:yyyyMM}/info-%d{yyyyMMdd}.log.gz">
            <PatternLayout pattern="${serverlog.pattern.format}"/>
            <Policies>
                <TimeBasedTriggeringPolicy modulate="true" interval="1"/>
            </Policies>
            <!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件-->
            <DefaultRolloverStrategy max="48"/>
        </RollingFile>

        <RollingFile name="allErr" fileName="${all.path}/error.log"
                     filePattern="${all.path}/$${date:yyyyMM}/error-%d{yyyyMMdd}.log.gz">
            <ThresholdFilter level="ERROR" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="${serverlog.pattern.format}"/>
            <Policies>
                <TimeBasedTriggeringPolicy modulate="true" interval="1"/>
            </Policies>
            <DefaultRolloverStrategy max="48"/>
        </RollingFile>

        <Async name="allAsync" includeLocation="true">
            <AppenderRef ref="all"/>
        </Async>
        <Async name="allErrAsync" includeLocation="true">
            <AppenderRef ref="allErr"/>
        </Async>
        
        <!--ECS Log -->
        <RollingFile name="snapshotLogAppender" fileName="${snapshot.path}/snapshot.log"
                     filePattern="${snapshot.path}/$${date:yyyyMM}/snapshotlog-%d{yyyyMMdd}.log.gz">
            <ThresholdFilter level="DEBUG" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="%msg%n"/>
            <Policies>
                <TimeBasedTriggeringPolicy modulate="true" interval="1"/>
            </Policies>
            <DefaultRolloverStrategy max="48"/>
        </RollingFile>
        <Async name="snapshotLogAppenderAsync" includeLocation="true">
            <AppenderRef ref="snapshotLogAppender"/>
        </Async>
    </appenders>
    <!--然后定义logger，只有定义了logger并引入的appender，appender才会生效-->
    <loggers>
        <!--建立一个默认的root的logger-->
        <root level="${log.level}" includeLocation="true">
            <appender-ref ref="Console"/>
            <appender-ref ref="allAsync"/>
            <appender-ref ref="allErrAsync"/>
        </root>
        <logger name="snapshotLogger">
            <appender-ref ref="snapshotLogAppenderAsync"/>
        </logger>
        <logger name="com.fasterxml.jackson" level="WARN"/>
    </loggers>
</configuration>